'use strict';

/**
 * Properties and methods of the Collection Entity
 */
Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x2, _x3, _x4) { var _again = true; _function: while (_again) { var object = _x2, property = _x3, receiver = _x4; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x2 = parent; _x3 = property; _x4 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Collection = (function (_Array) {
  _inherits(Collection, _Array);

  /**
   * Constructor
   *
   * @param {Object} data Api object
   */

  function Collection() {
    var data = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, Collection);

    _get(Object.getPrototypeOf(Collection.prototype), 'constructor', this).call(this);
    this._href = data.href;
    this._limit = data.limit;
    this._next = data.next;
    this._offset = data.offset;
    this._previous = data.previous;
    this._total = data.total;
  }

  /**
   * Exports the Collection class.
   */

  /**
   * @param {Object} data Api response type
   */

  _createClass(Collection, [{
    key: 'type',
    set: function set(data) {
      this._type = data + 'Collection';
    },

    /**
     * @return {String} Collection type
     */
    get: function get() {
      return this._type;
    }

    /**
     * @param {Object} data Api response href
     */
  }, {
    key: 'href',
    set: function set(data) {
      this._href = data.href;
    },

    /**
     * @return {String} Collection href
     */
    get: function get() {
      return this._href;
    }

    /**
     * @param {Object} data Api response limit
     */
  }, {
    key: 'limit',
    set: function set(data) {
      this._limit = data.limit;
    },

    /**
     * @return {String} Collection limit
     */
    get: function get() {
      return this._limit;
    }

    /**
     * @param {Object} data Api response next
     */
  }, {
    key: 'next',
    set: function set(data) {
      this._next = data.next;
    },

    /**
     * @return {String} Collection next
     */
    get: function get() {
      return this._next;
    }

    /**
     * @param {Object} data Api response offset
     */
  }, {
    key: 'offset',
    set: function set(data) {
      this._offset = data.offset;
    },

    /**
     * @return {String} Collection offset
     */
    get: function get() {
      return this._offset;
    }

    /**
     * @param {Object} data Api response previous
     */
  }, {
    key: 'previous',
    set: function set(data) {
      this._previous = data.previous;
    },

    /**
     * @return {String} Collection previous
     */
    get: function get() {
      return this._previous;
    }

    /**
     * @param {Object} data Api response total
     */
  }, {
    key: 'total',
    set: function set(data) {
      this._total = data.total;
    },

    /**
     * @return {String} Collection total
     */
    get: function get() {
      return this._total;
    }
  }]);

  return Collection;
})(Array);

exports['default'] = Collection;
module.exports = exports['default'];