'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _entitiesPlaylistEntity = require('../entities/PlaylistEntity');

var _entitiesPlaylistEntity2 = _interopRequireDefault(_entitiesPlaylistEntity);

var _handlersPlaylistHandler = require('../handlers/PlaylistHandler');

var _handlersPlaylistHandler2 = _interopRequireDefault(_handlersPlaylistHandler);

var _Factory = require('../Factory');

var _Factory2 = _interopRequireDefault(_Factory);

/**
 * Add helpers methods to PlaylistEntity
 */

var Playlist = (function (_PlaylistEntity) {
  _inherits(Playlist, _PlaylistEntity);

  /**
   * @param {Object} data Playlist object
   */

  function Playlist(data) {
    _classCallCheck(this, Playlist);

    _get(Object.getPrototypeOf(Playlist.prototype), 'constructor', this).call(this, data);
  }

  /**
   * Exports the Playlist class.
   */

  /**
   * Get a list of Tracks of a Playlist.
   *
   * @public
   * @override
   * @return {Promise}
   */

  _createClass(Playlist, [{
    key: 'addTrack',

    /**
     * Add one or more Tracks to a Playlist.
     *
     * @public
     * @param {Array} tracks Tracks list
     * @param {Object} [query] Query parameters.
     * @return {Promise}
     */
    value: function addTrack(tracks, query) {
      var trackList = tracks.map(function (track) {
        return track.uri;
      });
      return new _handlersPlaylistHandler2['default']().addTracks(trackList, this.owner.id, this.id, query);
    }

    /**
     * Remove one or more Tracks to a Playlist.
     *
     * @public
     * @param {Array} tracks Tracks list
     * @param {Object} [query] Query parameters.
     * @return {Promise}
     */
  }, {
    key: 'removeTrack',
    value: function removeTrack(tracks, query) {
      var trackList = tracks.map(function (track) {
        return track.uri;
      });
      return new _handlersPlaylistHandler2['default']().removeTracks(trackList, this.owner.id, this.id, query);
    }

    /**
     * Follow a Playlist
     *
     * @public
     * @param {Object} [query] query parameters.
     * @return {Promise}
     */
  }, {
    key: 'follow',
    value: function follow(query) {
      return new _handlersPlaylistHandler2['default']().follow(this.owner.id, this.id, query);
    }

    /**
     * Unfollow a Playlist
     *
     * @public
     * @param {Object} [query] Query parameters.
     * @return {Promise}
     */
  }, {
    key: 'unfollow',
    value: function unfollow(query) {
      return new _handlersPlaylistHandler2['default']().unfollow(this.owner.id, this.id, query);
    }

    /**
     * Verify if a user follow a playlist
     *
     * @public
     * @param {Array} [ids] User ids list.
     * @return {Promise}
     */
  }, {
    key: 'contains',
    value: function contains(ids) {
      return new _handlersPlaylistHandler2['default']().contains(this.owner.id, this.id, ids);
    }

    /**
     * Edit a Playlist
     *
     * @public
     * @return {Promise}
     */
  }, {
    key: 'edit',
    value: function edit() {
      return new _handlersPlaylistHandler2['default']().edit(this.owner.id, this.id, this.name, this['public']);
    }
  }, {
    key: 'tracks',
    get: function get() {
      return (0, _Factory2['default'])(this._tracks);
    }
  }]);

  return Playlist;
})(_entitiesPlaylistEntity2['default']);

exports['default'] = Playlist;
module.exports = exports['default'];