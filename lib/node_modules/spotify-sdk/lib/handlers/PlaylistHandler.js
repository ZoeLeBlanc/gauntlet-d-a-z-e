'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _helpersPlaylist = require('../helpers/Playlist');

var _helpersPlaylist2 = _interopRequireDefault(_helpersPlaylist);

var _Client = require('../Client');

var _Client2 = _interopRequireDefault(_Client);

/**
 * Methods for retrieving information about playlists and for managing playlists.
 *
 * @see https://developer.spotify.com/web-api/playlist-endpoints/
 */

var PlaylistHandler = (function () {
  function PlaylistHandler() {
    _classCallCheck(this, PlaylistHandler);
  }

  /**
   * Exports the PlaylistHandler class.
   */

  _createClass(PlaylistHandler, [{
    key: 'search',

    /**
     * Get a collection of artists that match a keyword string.
     *
     * @see https://developer.spotify.com/web-api/search-item/
     *
     * @public
     * @param {String} name Name of the playlist.
     * @param {Object} [query] Query parameters.
     * @return {Promise} playlistCollection
     */
    value: function search(name, query) {
      return _Client2['default'].instance.request('/search?type=playlist&q=' + encodeURIComponent(name), 'GET', query);
    }

    /**
     * Get a list of Spotify featured playlists.
     * @see https://developer.spotify.com/web-api/get-list-featured-playlists/
     *
     * @public
     * @required {OAuth}
     * @param {Object} [query] Query parameters.
     * @return {Promise} playlistCollection
     */
  }, {
    key: 'featuredPlaylists',
    value: function featuredPlaylists(query) {
      return _Client2['default'].instance.request('/browse/featured-playlists', 'GET', query);
    }

    /**
     * Get a list of Spotify playlists tagged with a particular category.
     * @see https://developer.spotify.com/web-api/get-categorys-playlists/
     *
     * @public
     * @required {OAuth}
     * @param {int} id Category id
     * @param {Object} [query] Query parameters.
     * @return {Promise} playlistCollection
     */
  }, {
    key: 'categoriesPlaylists',
    value: function categoriesPlaylists(id, query) {
      return _Client2['default'].instance.request('/browse/categories/' + id + '/playlists', 'GET', query);
    }

    /**
     * Add one or more tracks to a user’s playlist.
     * @see https://developer.spotify.com/web-api/add-tracks-to-playlist/
     *
     * @public
     * @required {OAuth}
     * @param {array} tracks List of uri tracks
     * @param {String} userId User id
     * @param {String} playlistId Playlist id
     * @param {Object} [query] Query parameters.
     * @return {Promise} JSON response
     */
  }, {
    key: 'addTracks',
    value: function addTracks(tracks, userId, playlistId, query) {
      return _Client2['default'].instance.request('/users/' + userId + '/playlists/' + playlistId + '/tracks', 'POST', { uris: tracks });
    }

    /**
     * Remove one or more tracks from a user’s playlist.
     * @see https://developer.spotify.com/web-api/remove-tracks-playlist/
     *
     * @public
     * @required {OAuth}
     * @param {array} tracks List of uri tracks
     * @param {String} userId User id
     * @param {String} playlistId Playlist id
     * @param {Object} [query] Query parameters.
     * @return {Promise} JSON response
     */
  }, {
    key: 'removeTracks',
    value: function removeTracks(tracks, userId, playlistId, query) {
      return _Client2['default'].instance.request('/users/' + userId + '/playlists/' + playlistId + '/tracks', 'DELETE', { uris: tracks });
    }

    /**
     * Add a user as a follower of a playlist.
     * @see https://developer.spotify.com/web-api/follow-playlist/
     *
     * @public
     * @required {OAuth}
     * @param {String} userId User id
     * @param {String} playlistId Playlist id
     * @param {Object} [query] Query parameters.
     * @return {Promise} JSON response
     */
  }, {
    key: 'follow',
    value: function follow(userId, playlistId, query) {
      return _Client2['default'].instance.request('/users/' + userId + '/playlists/' + playlistId + '/followers', 'PUT');
    }

    /**
     * Remove a user as a follower of a playlist.
     * @see https://developer.spotify.com/web-api/unfollow-playlist/
     *
     * @public
     * @required {OAuth}
     * @param {String} userId User id
     * @param {String} playlistId Playlist id
     * @param {Object} [query] Query parameters.
     * @return {Promise} JSON response
     */
  }, {
    key: 'unfollow',
    value: function unfollow(userId, playlistId, query) {
      return _Client2['default'].instance.request('/users/' + userId + '/playlists/' + playlistId + '/followers', 'DELETE');
    }

    /**
     * Check to see if one or more Spotify users are following a specified playlist.
     * @see https://developer.spotify.com/web-api/check-user-following-playlist/
     *
     * @public
     * @required {OAuth}
     * @param {Array} ids User id list
     * @param {String} userId User id
     * @param {String} playlistId Playlist id
     * @return {Promise} JSON response
     */
  }, {
    key: 'contains',
    value: function contains(userId, playlistId, ids) {
      return _Client2['default'].instance.request('/users/' + userId + '/playlists/' + playlistId + '/followers/contains', 'GET', { ids: ids });
    }

    /**
     * Create a playlist for a Spotify user.
     * @see https://developer.spotify.com/web-api/create-playlist/
     *
     * @public
     * @required {OAuth}
     * @param {String} userId User id
     * @param {String} name Name of the future playlist
     * @param {Bool} is_public public or private
     * @return {Promise} JSON response
     */
  }, {
    key: 'create',
    value: function create(userId, name, is_public) {
      return _Client2['default'].instance.request('/users/' + userId + '/playlists', 'POST', { name: name, 'public': is_public });
    }

    /**
     * Change a playlist’s name and public/private state.
     * @see https://developer.spotify.com/web-api/change-playlist-details/
     *
     * @public
     * @required {OAuth}
     * @param {String} userId User id
     * @param {String} playlistId Playlist id
     * @param {String} name Name of the future playlist
     * @param {Bool} is_public public or private
     * @return {Promise} JSON response
     */
  }, {
    key: 'edit',
    value: function edit(userId, playlistId, name, is_public) {
      return _Client2['default'].instance.request('/users/' + userId + '/playlists', 'PUT', { name: name, 'public': is_public });
    }

    /**
     * Convert a valid object to a Playlist entity
     *
     * @public
     * @param {Object} item Object to convert in entity
     * @return {Object}
     */
  }, {
    key: 'convert',
    value: function convert(item) {
      return new _helpersPlaylist2['default'](item);
    }
  }]);

  return PlaylistHandler;
})();

exports['default'] = PlaylistHandler;
module.exports = exports['default'];