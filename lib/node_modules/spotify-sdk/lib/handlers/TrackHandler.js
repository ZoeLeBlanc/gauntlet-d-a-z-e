'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _helpersTrack = require('../helpers/Track');

var _helpersTrack2 = _interopRequireDefault(_helpersTrack);

var _Client = require('../Client');

var _Client2 = _interopRequireDefault(_Client);

/**
 * Methods for retrieving information about one or more tracks from the Spotify catalog.
 *
 * @see https://developer.spotify.com/web-api/track-endpoints/
 */

var TrackHandler = (function () {
  function TrackHandler() {
    _classCallCheck(this, TrackHandler);
  }

  /**
   * Exports the TrackHandler class.
   */

  _createClass(TrackHandler, [{
    key: 'search',

    /**
     * Get a collection of tracks that match a keyword string.
     *
     * @see https://developer.spotify.com/web-api/search-item/
     *
     * @public
     * @param {String} name Name of the track.
     * @param {Object} [query] Query parameters.
     * @return {Promise} trackCollection
     */
    value: function search(name, query) {
      return _Client2['default'].instance.request('/search?type=track&q=' + encodeURIComponent(name), 'GET', query);
    }

    /**
     * Get a single/collection of track/s identified by its unique/list of Spotify ID.
     *
     * @see https://developer.spotify.com/web-api/get-albums-tracks/ FIXME: check the url
     *
     * @public
     * @param {String|Array} ids Track id/ids to retrive
     * @param {Object} [query] Query parameters.
     * @return {Promise} Track|trackCollection
     */
  }, {
    key: 'get',
    value: function get(ids, query) {
      if (Array.isArray(ids)) {
        return _Client2['default'].instance.request('/tracks/?ids=' + ids, 'GET', query);
      } else {
        return _Client2['default'].instance.request('/tracks/' + ids, 'GET', query);
      }
    }

    /**
     * Get audio feature information for a single track identified by its unique Spotify ID
     *
     * @see https://developer.spotify.com/web-api/get-audio-features/
     *
     * @public
     * @param {In/Arrayt} ids Track id or ids
     * @return {Promise} Track|trackCollection
     */
  }, {
    key: 'audioFeatures',
    value: function audioFeatures(ids) {
      if (Array.isArray(ids)) {
        return _Client2['default'].instance.request('/audio-features', 'GET', { ids: ids });
      } else {
        return _Client2['default'].instance.request('/audio-features/' + ids, 'GET');
      }
    }

    /**
     * Convert a valid object to a Track entity
     *
     * @public
     * @param {Object} item Object to convert in entity
     * @return {Object}
     */
  }, {
    key: 'convert',
    value: function convert(item) {
      if (item.uri) {
        return new _helpersTrack2['default'](item);
      } else {
        return new _helpersTrack2['default'](item.track);
      }
    }
  }]);

  return TrackHandler;
})();

exports['default'] = TrackHandler;
module.exports = exports['default'];