'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _helpersUser = require('../helpers/User');

var _helpersUser2 = _interopRequireDefault(_helpersUser);

var _Client = require('../Client');

var _Client2 = _interopRequireDefault(_Client);

/**
 * Methods for retrieving information about one or more user/s from the Spotify catalog.
 *
 * @see https://developer.spotify.com/web-api/user-profile-endpoints/
 */

var UserHandler = (function () {
  function UserHandler() {
    _classCallCheck(this, UserHandler);
  }

  /**
   * Exports the UserHandler class.
   */

  _createClass(UserHandler, [{
    key: 'me',

    /**
     * Get detailed profile information about the current user.
     *
     * @see https://developer.spotify.com/web-api/get-current-users-profile/
     *
     * @public
     * @required {OAuth}
     * @return {Promise} User
     */
    value: function me() {
      return _Client2['default'].instance.request('/me');
    }

    /**
     * Get public profile information about a Spotify user.
     *
     * @see https://developer.spotify.com/web-api/get-users-profile/
     *
     * @public
     * @param {String} id User id to retrive
     * @required {OAuth}
     * @return {Promise} User
     */
  }, {
    key: 'get',
    value: function get(id) {
      return _Client2['default'].instance.request('/users/' + id);
    }

    /**
     * Get a list of the playlists owned or followed by a Spotify user.
     *
     * @see https://developer.spotify.com/web-api/get-list-users-playlists/
     *
     * @public
     * @param {String} id User User id
     * @param {String} [playlistId] id to retrive playlists
     * @param {Object} [query] Query parameters.
     * @required {OAuth}
     * @return {Promise} playlistCollection
     */
  }, {
    key: 'playlists',
    value: function playlists(id, playlistId, query) {
      if (playlistId) {
        return _Client2['default'].instance.request('/users/' + id + '/playlists/' + playlistId, 'GET', query);
      } else {
        return _Client2['default'].instance.request('/users/' + id + '/playlists', 'GET', query);
      }
    }

    /**
     * Check if a user follow an album, artist , track or user
     * @see https://developer.spotify.com/web-api/check-users-saved-albums/
     * @see https://developer.spotify.com/web-api/check-current-user-follows/
     *
     * @public
     * @required {OAuth} user-follow-read scope
     * @param {String} type artist, album or user
     * @param {Array} ids User id list
     * @return {Promise} JSON response
     */
  }, {
    key: 'contains',
    value: function contains(type, ids) {
      if (type === 'album') {
        return _Client2['default'].instance.request('/me/albums/contains', 'GET', { ids: ids });
      } else if (type === 'track') {
        return _Client2['default'].instance.request('/me/tracks/contains', 'GET', { ids: ids });
      } else {
        return _Client2['default'].instance.request('/me/following/contains', 'GET', { ids: ids, type: type });
      }
    }

    /**
     * Get the current userâ€™s top artists or tracks based on calculated affinity.
     * @see https://developer.spotify.com/web-api/get-users-top-artists-and-tracks/
     *
     * @public
     * @required {OAuth} user-top-read
     * @param {String} type artists or tracks
     * @param {Object} query limit, offset or time_range(long_term, medium_term, short_term)
     * @return {Promise} JSON response
     */
  }, {
    key: 'top',
    value: function top(type, query) {
      return _Client2['default'].instance.request('/me/top/' + type, 'GET', query);
    }

    /**
     * Convert a valid object to a User entity
     *
     * @public
     * @param {object} item Object to convert in entity
     * @return {Object}
     */
  }, {
    key: 'convert',
    value: function convert(item) {
      return new _helpersUser2['default'](item);
    }
  }]);

  return UserHandler;
})();

exports['default'] = UserHandler;
module.exports = exports['default'];