'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _helpersArtist = require('../helpers/Artist');

var _helpersArtist2 = _interopRequireDefault(_helpersArtist);

var _Client = require('../Client');

var _Client2 = _interopRequireDefault(_Client);

/**
 * Methods for retrieving information about one or more artists from the Spotify catalog.
 *
 * @see https://developer.spotify.com/web-api/artist-endpoints/
 */

var ArtistHandler = (function () {
  function ArtistHandler() {
    _classCallCheck(this, ArtistHandler);
  }

  /**
   * Exports the AlbumHandler class.
   */

  _createClass(ArtistHandler, [{
    key: 'search',

    /**
     * Get a collection of artists that match a keyword string.
     *
     * @see https://developer.spotify.com/web-api/search-item/
     *
     * @public
     * @param {String} name Name of the artist.
     * @param {Object} [query] Query parameters.
     * @return {Promise} artistCollection
     */
    value: function search(name, query) {
      return _Client2['default'].instance.request('/search?type=artist&q=' + encodeURIComponent(name), 'GET', query);
    }

    /**
     * Get a single/collection of artist/s identified by its unique/list of Spotify ID.
     *
     * @see https://developer.spotify.com/web-api/get-artist/
     *
     * @public
     * @param {String|Array} ids Artist id/ids to retrive
     * @param {Object} [query] Query parameters.
     * @return {Promise} Artist|artistCollection
     */
  }, {
    key: 'get',
    value: function get(ids, query) {
      if (Array.isArray(ids)) {
        return _Client2['default'].instance.request('/artists/?ids=' + ids, 'GET', query);
      } else {
        return _Client2['default'].instance.request('/artists/' + ids, 'GET', query);
      }
    }

    /**
     * Get Spotify catalog information about an artist’s albums.
     *
     * @see https://developer.spotify.com/web-api/get-artists-albums/
     *
     * @public
     * @param {String} id Artist id to retrive
     * @param {Object} [query] Query parameters.
     * @return {Promise} albumsCollection
     */
  }, {
    key: 'albums',
    value: function albums(id, query) {
      return _Client2['default'].instance.request('/artists/' + id + '/albums', 'GET', query);
    }

    /**
     * Get Spotify catalog information about an artist’s top tracks by country.
     *
     * @see https://developer.spotify.com/web-api/get-artists-top-tracks/
     *
     * @public
     * @param {String} id Artist id to retrive top tracks
     * @param {Object} [query] Query parameters.
     * @return {Promise} tracksCollection
     */
  }, {
    key: 'topTracks',
    value: function topTracks(id, query) {
      return _Client2['default'].instance.request('/artists/' + id + '/top-tracks', 'GET', query);
    }

    /**
     * Get Spotify catalog information about artists similar to a given artist.
     *
     * @see https://developer.spotify.com/web-api/get-related-artists/
     *
     * @public
     * @param {String} id Artist id to retrive related artists
     * @param {Object} [query] Query parameters.
     * @return {Promise} albumsCollection
     */
  }, {
    key: 'relatedArtists',
    value: function relatedArtists(id, query) {
      return _Client2['default'].instance.request('/artists/' + id + '/related-artists', 'GET', query);
    }

    /**
     * Add the current user as a follower of one or more artists.
     *
     * @see https://developer.spotify.com/web-api/follow-artists-users/
     *
     * @public
     * @param {Array} artists List of artists ids
     * @return {Promise} JSON reponse
     */
  }, {
    key: 'follow',
    value: function follow(artists) {
      return _Client2['default'].instance.request('/me/following?type=artist', 'PUT', { ids: artists });
    }

    /**
    * Remove the current user as a follower of one or more artists.
    *
    * @see https://developer.spotify.com/web-api/unfollow-artists-users/
    *
    * @public
    * @param {Array} artists List of artists ids
    * @return {Promise} JSON reponse
    */
  }, {
    key: 'unfollow',
    value: function unfollow(artists) {
      return _Client2['default'].instance.request('/me/following?type=artist', 'DELETE', { ids: artists });
    }

    /**
     * Convert a valid object to a Artist entity
     *
     * @public
     * @param {Object} item Object to convert in entity
     * @return {Object} Artist
     */
  }, {
    key: 'convert',
    value: function convert(item) {
      return new _helpersArtist2['default'](item);
    }
  }]);

  return ArtistHandler;
})();

exports['default'] = ArtistHandler;
module.exports = exports['default'];