'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _helpersAlbum = require('../helpers/Album');

var _helpersAlbum2 = _interopRequireDefault(_helpersAlbum);

var _Client = require('../Client');

var _Client2 = _interopRequireDefault(_Client);

/**
 * Methods for retrieving information about one or more albums from the Spotify catalog.
 *
 * @see https://developer.spotify.com/web-api/album-endpoints/
 */

var AlbumHandler = (function () {
  function AlbumHandler() {
    _classCallCheck(this, AlbumHandler);
  }

  /**
   * Exports the AlbumHandler class.
   */

  _createClass(AlbumHandler, [{
    key: 'search',

    /**
     * Get a collection of albums that match a keyword string.
     *
     * @see https://developer.spotify.com/web-api/search-item/
     *
     * @public
     * @param {String} name Name of the album.
     * @param {Object} [query] Query parameters.
     * @returns {Promise} albumsCollection
     */
    value: function search(name, query) {
      return _Client2['default'].instance.request('/search?type=album&q=' + encodeURIComponent(name), 'GET', query);
    }

    /**
     * Get a single/collection of album/s identified by its unique/list of Spotify ID.
     *
     * @see https://developer.spotify.com/web-api/get-album/
     *
     * @public
     * @param {String|Array} ids Album id/ids to retrive
     * @param {Object} [query] Query parameters.
     * @returns {Promise} Album|albumsCollection
     */
  }, {
    key: 'get',
    value: function get(ids, query) {
      if (Array.isArray(ids)) {
        return _Client2['default'].instance.request('/albums/?ids=' + ids, 'GET', query);
      } else {
        return _Client2['default'].instance.request('/albums/' + ids, 'GET', query);
      }
    }

    /**
     * Get a list of new album releases featured in Spotify.
     *
     * @see https://developer.spotify.com/web-api/get-list-new-releases/
     *
     * @public
     * @required {OAuth} user-library-read
     * @param {Object} [query] Query parameters.
     * @returns {Promise} albumsCollection
     */
  }, {
    key: 'newReleases',
    value: function newReleases(query) {
      return _Client2['default'].instance.request('/browse/new-releases', 'GET', query);
    }

    /**
     * Convert a valid object to a Album entity
     *
     * @public
     * @param {Object} item Object to convert in entity
     * @returns {Object} Album
     */
  }, {
    key: 'convert',
    value: function convert(item) {
      return new _helpersAlbum2['default'](item);
    }
  }]);

  return AlbumHandler;
})();

exports['default'] = AlbumHandler;
module.exports = exports['default'];